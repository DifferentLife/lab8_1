{"version":3,"sources":["logo.svg","Task.js","App.js","serviceWorker.js","config.js","index.js"],"names":["module","exports","props","task","editTask","deleteTask","id","name","className","onClick","App","useState","tasks","setTesks","setName","useEffect","retriveData","firestore","collection","onSnapshot","snapshot","console","log","doc","myTask","docs","map","d","data","delete","set","type","onChange","e","target","value","length","style","display","listStyle","index","key","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","initializeApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,qICG5B,G,kBAAA,SAACC,GAAW,IAChBC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,WAChBC,EAAYH,EAAZG,GAAIC,EAAQJ,EAARI,KAEX,OACI,4BACI,yBAAKC,UAAU,MAAMF,GAAS,yBAAKE,UAAU,QAAQD,GACrD,yBAAKC,UAAU,aACX,4BAAQA,UAAU,MAAMC,QAAW,kBAAMJ,EAAWC,KAApD,UACA,4BAAQE,UAAU,QAAQC,QAAW,kBAAML,EAASE,KAApD,YCyDDI,MA/Df,WAAgB,IAAD,EACaC,mBAAU,IADvB,mBACNC,EADM,KACCC,EADD,OAGWF,mBAAS,IAHpB,mBAGNJ,EAHM,KAGAO,EAHA,KAKbC,qBAAW,WACTC,MAEC,IAEH,IAAMA,EAAc,WAClBC,EAAUC,WAAW,SAASC,YAAY,SAACC,GACvCC,QAAQC,IAAIF,EAASG,KACrB,IAAIC,EAASJ,EAASK,KAAKC,KAAK,SAAAC,GAAM,IAAD,EAChBA,EAAEC,OAAdtB,EAD4B,EAC5BA,GAAIC,EADwB,EACxBA,KAEX,OADAc,QAAQC,IAAIhB,EAAIC,GACT,CAACD,KAAIC,WAEdM,EAASW,OAITnB,EAAa,SAACC,GAClBW,EAAUC,WAAW,SAASK,IAAIjB,EAAG,IAAIuB,UAGrCzB,EAAW,SAACE,GAChBW,EAAUC,WAAW,SAASK,IAAIjB,EAAG,IAAIwB,IAAI,CAACxB,KAAIC,UAyBpD,OACE,6BACC,oCACA,2BAAOwB,KAAK,OAAOxB,KAAK,OAAOyB,SAAW,SAACC,GAAD,OAAOnB,EAAQmB,EAAEC,OAAOC,UAClE,4BAAQ1B,QATK,WACd,IAAIH,EAAuB,IAAjBM,EAAMwB,OAAc,EAAExB,EAAMA,EAAMwB,OAAO,GAAG9B,GAAK,EAC3DW,EAAUC,WAAW,SAASK,IAAIjB,EAAG,IAAIwB,IAAK,CAACxB,KAAIC,WAOlD,YACC,wBAAI8B,MAAO,CAAEC,QAAQ,OAAQC,UAAU,UA1BzClB,QAAQC,IAAKV,GACTA,GAASA,EAAMwB,OACVxB,EAAMc,KAAK,SAACvB,EAAMqC,GACvB,OACA,kBAAC,EAAD,CACEC,IAAKD,EACLrC,KAAMA,EACNE,WAAYA,EACZD,SAAUA,OAKN,6CCtCMsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAWiBC,EAXF,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,sBCRnB,0CAS6B,IAAzBC,IAASC,KAAKrB,QACdoB,IAASE,cAAcX,GAEpB,IAAM9B,EAAYuC,IAASvC,YAElC0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.6ad2f106.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Task.css'\r\n\r\nexport default (props) => {\r\n    const {task, editTask, deleteTask} = props\r\n    const {id, name} = task\r\n\r\n    return (\r\n        <li>\r\n            <div className=\"id\">{id}</div><div className=\"name\">{name}</div>\r\n            <div className='container'>\r\n                <button className=\"red\" onClick = {() => deleteTask(id)}>Delete</button>\r\n                <button className=\"green\" onClick = {() => editTask(id)}>Edit</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import React, { useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {firestore} from './index'\nimport Task from './Task'\n\nfunction App() {\n  const [tasks, setTesks] = useState ([])\n\n  const [name, setName] = useState('')\n\n  useEffect( () => {\n    retriveData()\n\n  }, [])\n\n  const retriveData = () => {\n    firestore.collection(\"tasks\").onSnapshot( (snapshot) => {\n        console.log(snapshot.doc)\n        let myTask = snapshot.docs.map( d => {\n          const {id, name} = d.data()\n          console.log(id, name)\n          return {id, name}\n        })\n        setTesks(myTask)\n    } )\n  }\n\n  const deleteTask = (id) => {\n    firestore.collection(\"tasks\").doc(id+'').delete()\n  }\n\n  const editTask = (id) => {\n    firestore.collection(\"tasks\").doc(id+'').set({id, name})\n  }\n\n  const renderTask = () => {\n    console.log (tasks)\n    if (tasks && tasks.length) {\n      return tasks.map( (task, index) => {\n        return (\n        <Task \n          key={index} \n          task={task}\n          deleteTask={deleteTask}\n          editTask={editTask}  />\n        )\n      })\n    }\n    else\n      return (<li> No task </li>)\n  }\n\n  const addTask = () => {\n    let id = (tasks.length === 0)?1:tasks[tasks.length-1].id + 1\n    firestore.collection(\"tasks\").doc(id+'').set( {id, name})\n  }\n\n  return (\n    <div>\n     <h1>Todo</h1>\n     <input type=\"text\" name=\"name\" onChange={ (e) => setName(e.target.value)} />\n     <button onClick={addTask}> Submit </button>\n      <ul style={{ display:'flex', listStyle:'none'}}>{renderTask()}</ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config = {\r\n    apiKey: \"AIzaSyDT4LjV5KOgEUzVQw3JVDq48TUMkz9LGk4\",\r\n    authDomain: \"todo-240311-ca1fb.firebaseapp.com\",\r\n    databaseURL: \"https://todo-240311-ca1fb.firebaseio.com\",\r\n    projectId: \"todo-240311-ca1fb\",\r\n    storageBucket: \"todo-240311-ca1fb.appspot.com\",\r\n    messagingSenderId: \"710390816055\",\r\n    appId: \"1:710390816055:web:80c78e2a532c561873ceb2\",\r\n    measurementId: \"G-JQSFFDYE4Y\"\r\n  };\r\n\r\n  export default config\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport config from './config'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nif (firebase.apps.length === 0)\n    firebase.initializeApp(config)\n\nexport const firestore = firebase.firestore()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}